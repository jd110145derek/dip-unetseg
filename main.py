# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI_design_project.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
from PyQt5 import QtCore, QtGui, QtWidgets
import tkinter as tk
from tkinter import filedialog
import cv2
import numpy as np
from PIL import Image
from math import pow
import skimage.io as io
from skimage import filters

from data import *
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img
import medpy.metric



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1456, 968)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 420, 201, 201))
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(320, 210, 201, 201))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(320, 420, 201, 201))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(320, 630, 201, 201))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(590, 210, 201, 201))
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(590, 420, 201, 201))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(590, 630, 201, 201))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(840, 340, 381, 391))
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(1260, 240, 161, 551))
        self.textBrowser.setObjectName("textBrowser")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(120, 840, 67, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(410, 840, 67, 17))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(660, 840, 67, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(19, 9, 531, 161))
        self.groupBox.setObjectName("groupBox")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_5.setGeometry(QtCore.QRect(400, 30, 101, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(50, 30, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_3.setGeometry(QtCore.QRect(190, 30, 161, 121))
        self.groupBox_3.setObjectName("groupBox_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 60, 80, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 30, 80, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(40, 90, 80, 25))
        self.pushButton_4.setObjectName("pushButton_4")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(630, 20, 341, 151))
        self.groupBox_2.setObjectName("groupBox_2")
        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_6.setGeometry(QtCore.QRect(210, 70, 101, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox.setGeometry(QtCore.QRect(100, 50, 49, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_13 = QtWidgets.QLabel(self.groupBox_2)
        self.label_13.setGeometry(QtCore.QRect(20, 50, 61, 16))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.groupBox_2)
        self.label_14.setGeometry(QtCore.QRect(20, 100, 47, 12))
        self.label_14.setObjectName("label_14")
        self.comboBox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox_2.setGeometry(QtCore.QRect(101, 100, 51, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(1280, 860, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(100, 870, 1151, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.groupBox.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.label_7.raise_()
        self.label_8.raise_()
        self.textBrowser.raise_()
        self.label_9.raise_()
        self.label_10.raise_()
        self.label_11.raise_()
        self.groupBox_2.raise_()
        self.label_12.raise_()
        self.horizontalSlider.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1456, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.load_img)
        self.pushButton_4.clicked.connect(self.load_mn)
        self.pushButton_3.clicked.connect(self.load_ft)
        self.pushButton_2.clicked.connect(self.load_ct)
        self.pushButton_5.clicked.connect(self.predict)
        self.pushButton_6.clicked.connect(self.load_combobox_patient)
        self.horizontalSlider.sliderReleased.connect(self.picture_change)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_9.setText(_translate("MainWindow", "Image"))
        self.label_10.setText(_translate("MainWindow", "gt"))
        self.label_11.setText(_translate("MainWindow", "result"))
        self.groupBox.setTitle(_translate("MainWindow", "Test"))
        self.pushButton_5.setText(_translate("MainWindow", "(3)Run"))
        self.pushButton.setText(_translate("MainWindow", "(1)Input"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Select GT"))
        self.pushButton_3.setText(_translate("MainWindow", "(2)FT"))
        self.pushButton_2.setText(_translate("MainWindow", "(2)CT"))
        self.pushButton_4.setText(_translate("MainWindow", "(2)MN"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Patient Sequence"))
        self.pushButton_6.setText(_translate("MainWindow", "Load"))
        self.comboBox.setItemText(0, _translate("MainWindow", "0"))
        self.comboBox.setItemText(1, _translate("MainWindow", "1"))
        self.comboBox.setItemText(2, _translate("MainWindow", "2"))
        self.comboBox.setItemText(3, _translate("MainWindow", "3"))
        self.comboBox.setItemText(4, _translate("MainWindow", "4"))
        self.comboBox.setItemText(5, _translate("MainWindow", "5"))
        self.comboBox.setItemText(6, _translate("MainWindow", "6"))
        self.comboBox.setItemText(7, _translate("MainWindow", "7"))
        self.comboBox.setItemText(8, _translate("MainWindow", "8"))
        self.comboBox.setItemText(9, _translate("MainWindow", "9"))
        self.label_13.setText(_translate("MainWindow", "Patient no."))
        self.label_14.setText(_translate("MainWindow", "T1 / T2"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "T1"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "T2"))
    def load_img(self):
        root = tk.Tk()
        root.withdraw()
        global source_path
        source_path = filedialog.askopenfilename()
        source_img = QtGui.QPixmap(source_path).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(source_img)
        self.textBrowser.clear()
        self.label_2.clear()
        self.label_3.clear()
        self.label_4.clear()
        self.label_5.clear()
        self.label_6.clear()
        self.label_7.clear()
        self.label_8.clear()

    def load_mn(self):
        root = tk.Tk()
        root.withdraw()
        global mn_source_path
        mn_source_path = filedialog.askopenfilename()
        mn_source_img = QtGui.QPixmap(mn_source_path).scaled(self.label_4.width(), self.label_4.height())
        self.label_4.setPixmap(mn_source_img)

    def load_ft(self):
        root = tk.Tk()
        root.withdraw()
        global ft_source_path
        ft_source_path = filedialog.askopenfilename()
        ft_source_img = QtGui.QPixmap(ft_source_path).scaled(self.label_3.width(), self.label_3.height())
        self.label_3.setPixmap(ft_source_img)

    def load_ct(self):
        root = tk.Tk()
        root.withdraw()
        global ct_source_path
        ct_source_path = filedialog.askopenfilename()
        ct_source_img = QtGui.QPixmap(ct_source_path).scaled(self.label_2.width(), self.label_2.height())
        self.label_2.setPixmap(ct_source_img)

    def predict(self):
        result_path = "./result/result.png"
        ########### predict input image(ct)
        testGene = testGenerator(source_path)
        ct_model = load_model("./model_1.hdf5")
        ct_results = ct_model.predict(testGene,1,verbose=1)
        # save result(ct)
        ct_saveResult("./result",ct_results)
        

        ct_predict_path = "./result/ct_predict.png"
        ct_result_path = "./result/ct_result.png"
        ct_edge_result_path = "./result/ct_edge_result.png"
        ct_result = cv2.imread(ct_predict_path, 0)
        ct_img_h, ct_img_w = ct_result.shape

        # change predict image to black and white
        for i in range(0, ct_img_h):
            for j in range(0, ct_img_w):
                if ct_result[i, j] > 80:
                    ct_result[i, j] = 255
                else:
                    ct_result[i, j] = 0
        cv2.imwrite(ct_result_path, ct_result)
        #cv2.imwrite(ct_predict_path, ct_result)

        ct_result = QtGui.QPixmap(ct_result_path).scaled(self.label_5.width(), self.label_5.height())
        self.label_5.setPixmap(ct_result)

        # edge detect
        ct_result = io.imread(ct_result_path, as_gray = True)
        ct_edge_result = filters.sobel(ct_result)
        io.imsave(ct_edge_result_path, ct_edge_result)

        # overlapping edge detect to original image
        source_img = cv2.imread(source_path, cv2.IMREAD_COLOR)
        for i in range(0, ct_img_h):
            for j in range(0, ct_img_w):
                if ct_edge_result[i, j] != 0:
                    source_img[i, j] = (0, 0, 255)
        
        cv2.imwrite(result_path, source_img)

        ##############################################

        ########### predict input image(ft)
        testGene = testGenerator(source_path)
        ft_model = load_model("./model_2.hdf5")
        ft_results = ft_model.predict(testGene,1,verbose=1)
        # save result(ct)
        ft_saveResult("./result/",ft_results)
        

        ft_predict_path = "./result/ft_predict.png"
        ft_result_path = "./result/ft_result.png"
        ft_edge_result_path = "./result/ft_edge_result.png"
        ft_result = cv2.imread(ft_predict_path, 0)
        ft_img_h, ft_img_w = ft_result.shape

        # change predict image to black and white
        for i in range(0, ft_img_h):
            for j in range(0, ft_img_w):
                if ft_result[i, j] > 80:
                    ft_result[i, j] = 255
                else:
                    ft_result[i, j] = 0
        cv2.imwrite(ft_result_path, ft_result)
        #cv2.imwrite(ft_predict_path, ft_result)

        ft_result = QtGui.QPixmap(ft_result_path).scaled(self.label_6.width(), self.label_6.height())
        self.label_6.setPixmap(ft_result)

        # edge detect
        ft_result = io.imread(ft_result_path, as_gray = True)
        ft_edge_result = filters.sobel(ft_result)
        io.imsave(ft_edge_result_path, ft_edge_result)

        # overlapping edge detect to original image
        source_img = cv2.imread(result_path, cv2.IMREAD_COLOR)
        for i in range(0, ft_img_h):
            for j in range(0, ft_img_w):
                if ft_edge_result[i, j] != 0:
                    source_img[i, j] = (255, 0, 0)
        
        cv2.imwrite(result_path, source_img)

        ##############################################
                
        ########### predict input image(mn)
        testGene = testGenerator(source_path)
        mn_model = load_model("./model_3.hdf5")
        mn_results = mn_model.predict(testGene,1,verbose=1)
        # save result(mn)
        mn_saveResult("./result/",mn_results)
        

        mn_predict_path = "./result/mn_predict.png"
        mn_result_path = "./result/mn_result.png"
        mn_edge_result_path = "./result/mn_edge_result.png"
        mn_result = cv2.imread(mn_predict_path, 0)
        mn_img_h, mn_img_w = mn_result.shape

        # change predict image to black and white
        for i in range(0, mn_img_h):
            for j in range(0, mn_img_w):
                if mn_result[i, j] > 100:
                    mn_result[i, j] = 255
                else:
                    mn_result[i, j] = 0
        cv2.imwrite(mn_result_path, mn_result)
        #cv2.imwrite(mn_predict_path, mn_result)

        mn_result = QtGui.QPixmap(mn_result_path).scaled(self.label_7.width(), self.label_7.height())
        self.label_7.setPixmap(mn_result)

        # edge detect
        mn_result = io.imread(mn_result_path, as_gray = True)
        mn_edge_result = filters.sobel(mn_result)
        io.imsave(mn_edge_result_path, mn_edge_result)

        # overlapping edge detect to original image
        source_img = cv2.imread(result_path, cv2.IMREAD_COLOR)
        for i in range(0, mn_img_h):
            for j in range(0, mn_img_w):
                if mn_edge_result[i, j] != 0:
                    source_img[i, j] = (0, 255, 255)
        
        cv2.imwrite(result_path, source_img)

        ##############################################

        # show image
        result_img = QtGui.QPixmap(result_path).scaled(self.label_8.width(), self.label_8.height())
        self.label_8.setPixmap(result_img)

        ## compute dc
        ct_source = cv2.imread(ct_source_path,0)
        ct_dc = medpy.metric.binary.dc(ct_result,ct_source)

        ft_source = cv2.imread(ft_source_path,0)
        ft_dc = medpy.metric.binary.dc(ft_result,ft_source)

        mn_source = cv2.imread(mn_source_path,0)
        mn_dc = medpy.metric.binary.dc(mn_result,mn_source)
        
        output = "\nDC : " +"\n\n  CT :"+ str(round(ct_dc,2))+"\n  FT :"+ str(round(ft_dc,2))+"\n  MN :"+ str(round(mn_dc,2))
        self.textBrowser.append(output)
        return

    def set_picture(self, patient_no, img_no):
        org_image_path = f'./carpalTunnel/{patient_no}/{T_sequence}/{img_no}.jpg'
        ct_gt_path = f'./carpalTunnel/{patient_no}/CT/{img_no}.jpg'
        ft_gt_path = f'./carpalTunnel/{patient_no}/FT/{img_no}.jpg'
        mn_gt_path = f'./carpalTunnel/{patient_no}/MN/{img_no}.jpg'
        ct_result_path = f'./seg_result/{patient_no}/CT/{img_no}.jpg'
        ft_result_path = f'./seg_result/{patient_no}/FT/{img_no}.jpg'
        mn_result_path = f'./seg_result/{patient_no}/MN/{img_no}.jpg'
        image_result_path = f'./seg_result/{patient_no}/{T_sequence}/{img_no}.jpg'

        org_image_img = QtGui.QPixmap(org_image_path).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(org_image_img)
        mn_gt_img = QtGui.QPixmap(mn_gt_path).scaled(self.label_4.width(), self.label_4.height())
        self.label_4.setPixmap(mn_gt_img)
        ft_gt_img = QtGui.QPixmap(ft_gt_path).scaled(self.label_3.width(), self.label_3.height())
        self.label_3.setPixmap(ft_gt_img)
        ct_gt_img = QtGui.QPixmap(ct_gt_path).scaled(self.label_2.width(), self.label_2.height())
        self.label_2.setPixmap(ct_gt_img)
        mn_result_img = QtGui.QPixmap(mn_result_path).scaled(self.label_7.width(), self.label_7.height())
        self.label_7.setPixmap(mn_result_img)
        ft_result_img = QtGui.QPixmap(ft_result_path).scaled(self.label_6.width(), self.label_6.height())
        self.label_6.setPixmap(ft_result_img)
        ct_result_img = QtGui.QPixmap(ct_result_path).scaled(self.label_5.width(), self.label_5.height())
        self.label_5.setPixmap(ct_result_img)
        image_result_img = QtGui.QPixmap(image_result_path).scaled(self.label_8.width(), self.label_8.height())
        self.label_8.setPixmap(image_result_img)

    def show_dc(self, patient_no, img_no):
        f = open(f"./seg_result/{patient_no}/DC.txt", "r")
        content = "".join(f)
        line = content.split('\n')
        print_flag = False
        ct_list = []
        ft_list = []
        mn_list = []
        for tmp in line:
            if("CT" in tmp):
                temp = tmp.replace("CT :", "")
                ct_list.append(float(temp))
            elif("FT" in tmp):
                temp = tmp.replace("FT :", "")
                ft_list.append(float(temp))
            elif("MN" in tmp):
                temp = tmp.replace("MN :", "")
                mn_list.append(float(temp))
        
        img_amount = len(ct_list)
        ct_sum = 0
        ft_sum = 0
        mn_sum = 0
        for i in range(img_amount):
            ct_sum += ct_list[i]
            ft_sum += ft_list[i]
            mn_sum += mn_list[i]
        ct_ave = ct_sum / img_amount
        ft_ave = ft_sum / img_amount
        mn_ave = mn_sum / img_amount
        self.textBrowser.clear()
        output = f"Image DC:\n  CT={ct_list[img_no]}\n  FT={ft_list[img_no]}\n  MN={mn_list[img_no]}\n\n"
        self.textBrowser.append(output)
        output = f"Sequence DC:\n  CT={ct_ave}\n  FT={ft_ave}\n  MN={mn_ave}"
        self.textBrowser.append(output)

    def load_combobox_patient(self):
        self.horizontalSlider.setValue(0)
        patient_no = int(self.comboBox.currentText())
        global T_sequence
        T_sequence = "".join(self.comboBox_2.currentText())
        img_no = int(self.horizontalSlider.value())
        global img_amount
        DIR = f'./seg_result/{patient_no}/{T_sequence}/'
        img_amount = len([name for name in os.listdir(DIR) if os.path.isfile(os.path.join(DIR, name))]) - 1
        self.horizontalSlider.setMinimum(1)
        self.horizontalSlider.setMaximum(img_amount)
        self.horizontalSlider.setSingleStep(1)
        self.label_12.setText(f'1/{img_amount}')
        self.picture_change()

    def picture_change(self):
        patient_no = int(self.comboBox.currentText())
        img_no = int(self.horizontalSlider.value())
        self.label_12.setText(f'{img_no}/{img_amount}')
        self.set_picture(patient_no, img_no)
        self.show_dc(patient_no, img_no)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
